Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysGlobalTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysGlobalTest
    PROPERTIES
      Name                #SysGlobalTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// тестирует класс Global
        #// название этого класса начинается на Sys, чтобы не задевать привычный способ поиска класса Global по первым буквам
        #//
        #// из-за разницы в названиях не найдет coverage автоматически.
        #// ну и пусть. главное чтобы тестировало
        #//
        #class SysGlobalTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testNZ
        #void testNZ()
        #{
        #    this.assertEquals('A', nz('A','B'));
        #    this.assertEquals('B', nz('','B'));
        #    this.assertEquals('B', nz(0,'B'));
        #    this.assertEquals('B', nz(null,'B'));
        #    this.assertEquals('B', nz(DateNull(),'B'));
        #    this.assertEquals(null, nz(null,null));
        #
        #    this.assertEquals(1, nz(1,2));
        #    this.assertEquals(2, nz('',2));
        #    this.assertEquals(2, nz(0,2));
        #    this.assertEquals(2, nz(null,2));
        #    this.assertEquals(2, nz(DateNull(),2));
        #
        #    this.assertEquals(01\01\2017, nz(01\01\2017,02\01\2017));
        #    this.assertEquals(02\01\2017, nz('',02\01\2017));
        #    this.assertEquals(02\01\2017, nz(0,02\01\2017));
        #    this.assertEquals(02\01\2017, nz(null,02\01\2017));
        #}
      ENDSOURCE
      SOURCE #testStrAfter
        #void testStrAfter()
        #{
        #    this.assertEquals('DEF-GH',    strAfter('ABC-DEF-GH','-'));
        #    this.assertEquals('GH',        strAfter('ABC-DEF-GH','DEF-'));
        #    this.assertEquals('',          strAfter('ABC-DEF-GH','H'));
        #    this.assertEquals('BC-DEF-GH', strAfter('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-GH',strAfter('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrAfterChar
        #void testStrAfterChar()
        #{
        #    this.assertEquals('DEF-GH',    strAfterChar('ABC-DEF-GH','-='));
        #    this.assertEquals('DEF-GH',    strAfterChar('ABC-DEF-GH','E-='));
        #    this.assertEquals('',          strAfterChar('ABC-DEF-GH','H'));
        #    this.assertEquals('BC-DEF-GH', strAfterChar('ABC-DEF-GH','A-='));
        #    this.assertEquals('ABC-DEF-GH',strAfterChar('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrAfterLast
        #void testStrAfterLast()
        #{
        #    this.assertEquals('GH',        strAfterLast('ABC-DEF-GH','-'));
        #    this.assertEquals('GH',        strAfterLast('ABC-DEF-GH','DEF-'));
        #    this.assertEquals('',          strAfterLast('ABC-DEF-GH','H'));
        #    this.assertEquals('BC-DEF-GH', strAfterLast('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-GH',strAfterLast('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrAfterLastChar
        #void testStrAfterLastChar()
        #{
        #    this.assertEquals('GH',        strAfterLastChar('ABC-DEF-GH','-='));
        #    this.assertEquals('GH',        strAfterLastChar('ABC-DEF-GH','E-='));
        #    this.assertEquals('',          strAfterLastChar('ABC-DEF-GH','H-='));
        #    this.assertEquals('BC-DEF-GH', strAfterLastChar('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-GH',strAfterLastChar('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrBefore
        #void testStrBefore()
        #{
        #    this.assertEquals('ABC',       strBefore('ABC-DEF-GH','-'));
        #    this.assertEquals('ABC',       strBefore('ABC-DEF-GH','-DEF'));
        #    this.assertEquals('',          strBefore('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-G', strBefore('ABC-DEF-GH','H'));
        #    this.assertEquals('ABC-DEF-GH',strBefore('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrBeforeChar
        #void testStrBeforeChar()
        #{
        #    this.assertEquals('ABC',       strBeforeChar('ABC-DEF-GH','-='));
        #    this.assertEquals('ABC',       strBeforeChar('ABC-DEF-GH','E-='));
        #    this.assertEquals('',          strBeforeChar('ABC-DEF-GH','A-='));
        #    this.assertEquals('ABC-DEF-G', strBeforeChar('ABC-DEF-GH','H'));
        #    this.assertEquals('ABC-DEF-GH',strBeforeChar('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrBeforeLast
        #void testStrBeforeLast()
        #{
        #    this.assertEquals('ABC-DEF'   ,strBeforeLast('ABC-DEF-GH','-'));
        #    this.assertEquals('ABC'       ,strBeforeLast('ABC-DEF-GH','-DEF'));
        #    this.assertEquals(''          ,strBeforeLast('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-G' ,strBeforeLast('ABC-DEF-GH','H'));
        #    this.assertEquals('ABC-DEF-GH',strBeforeLast('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrBeforeLastChar
        #void testStrBeforeLastChar()
        #{
        #    this.assertEquals('ABC-DEF'   ,strBeforeLastChar('ABC-DEF-GH','-='));
        #    this.assertEquals('ABC-DEF'   ,strBeforeLastChar('ABC-DEF-GH','E-='));
        #    this.assertEquals(''          ,strBeforeLastChar('ABC-DEF-GH','A'));
        #    this.assertEquals('ABC-DEF-G' ,strBeforeLastChar('ABC-DEF-GH','H-='));
        #    this.assertEquals('ABC-DEF-GH',strBeforeLastChar('ABC-DEF-GH',','));
        #}
      ENDSOURCE
      SOURCE #testStrLeft
        #void testStrLeft()
        #{
        #    this.assertEquals('ABC',strLeft('ABC-DEF-GH',3));
        #    this.assertEquals('',strLeft('ABC-DEF-GH',0));
        #    this.assertEquals('',strLeft('ABC-DEF-GH',-3));
        #    this.assertEquals('ABC-DEF-GH',strLeft('ABC-DEF-GH',30));
        #}
      ENDSOURCE
      SOURCE #testStrLFix
        #void testStrLFix()
        #{
        #    this.assertEquals('ABC  ',strLFix('ABC',5));
        #    this.assertEquals('ABC==',strLFix('ABC',5,'='));
        #    this.assertEquals('ABC==',strLFix('ABC',5,'=Z'));
        #    this.assertEquals('ABC',strLFix('ABC',3,'='));
        #    this.assertEquals('AB',strLFix('ABC',2,'='));
        #    this.assertEquals('',strLFix('ABC',0,'='));
        #    this.assertEquals('A',strLFix('ABC',-1,'='));
        #    this.assertEquals('A',strLFix('ABC',-5,'='));
        #}
      ENDSOURCE
      SOURCE #testStrPadLeft
        #void testStrPadLeft()
        #{
        #    this.assertEquals('  ABC',strPadLeft('ABC',5));
        #    this.assertEquals('==ABC',strPadLeft('ABC',5,'='));
        #    this.assertEquals('==ABC',strPadLeft('ABC',5,'=Z'));
        #    this.assertEquals('ABC',strPadLeft('ABC',3,'='));
        #    this.assertEquals('ABC',strPadLeft('ABC',2,'='));
        #    this.assertEquals('ABC',strPadLeft('ABC',0,'='));
        #    this.assertEquals('ABC',strPadLeft('ABC',-1,'='));
        #    this.assertEquals('ABC',strPadLeft('ABC',-5,'='));
        #}
      ENDSOURCE
      SOURCE #testStrPadRight
        #void testStrPadRight()
        #{
        #    this.assertEquals('ABC  ',strPadRight('ABC',5));
        #    this.assertEquals('ABC==',strPadRight('ABC',5,'='));
        #    this.assertEquals('ABC==',strPadRight('ABC',5,'=Z'));
        #    this.assertEquals('ABC',strPadRight('ABC',3,'='));
        #    this.assertEquals('ABC',strPadRight('ABC',2,'='));
        #    this.assertEquals('ABC',strPadRight('ABC',0,'='));
        #    this.assertEquals('ABC',strPadRight('ABC',-1,'='));
        #    this.assertEquals('ABC',strPadRight('ABC',-5,'='));
        #}
      ENDSOURCE
      SOURCE #testStrRFix
        #void testStrRFix()
        #{
        #    this.assertEquals('  ABC',strRFix('ABC',5));
        #    this.assertEquals('==ABC',strRFix('ABC',5,'='));
        #    this.assertEquals('==ABC',strRFix('ABC',5,'=Z'));
        #    this.assertEquals('ABC',strRFix('ABC',3,'='));
        #    this.assertEquals('AB',strRFix('ABC',2,'='));
        #    this.assertEquals('',strRFix('ABC',0,'='));
        #    this.assertEquals('A',strRFix('ABC',-1,'='));
        #    this.assertEquals('A',strRFix('ABC',-5,'='));
        #}
      ENDSOURCE
      SOURCE #testStrRight
        #void testStrRight()
        #{
        #    this.assertEquals('DEF-GH'    ,strRight('ABC-DEF-GH',6));
        #    this.assertEquals(''          ,strRight('ABC-DEF-GH',0));
        #    this.assertEquals(''          ,strRight('ABC-DEF-GH',-3));
        #    this.assertEquals('ABC-DEF-GH',strRight('ABC-DEF-GH',30));
        #}
      ENDSOURCE
      SOURCE #testStrSplitChar
        #void testStrSplitChar()
        #{
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitChar('ABC-DEF-GH','-='));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitChar('ABC-DEF-GH','-=',0));
        #    this.assertEquals(['ABC-DEF-GH'],           strSplitChar('ABC-DEF-GH','-=',1));
        #    this.assertEquals(['ABC','DEF-GH'],         strSplitChar('ABC-DEF-GH','-=',2));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitChar('ABC-DEF-GH','-=',3));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitChar('ABC-DEF-GH','-=',4));
        #
        #    this.assertEquals(['ABC-DEF-GH'],           strSplitChar('ABC-DEF-GH',''));
        #    this.assertEquals(['ABC-DEF-GH'],           strSplitChar('ABC-DEF-GH','',4));
        #
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitChar('-ABC-DEF-GH-','-='));
        #
        #}
      ENDSOURCE
      SOURCE #testStrSplitCon
        #void testStrSplitCon()
        #{
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',[':=','=']));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',[':=','='],0));
        #    this.assertEquals(['ABC=DEF:=GH'],          strSplitCon('ABC=DEF:=GH',[':=','='],1));
        #    this.assertEquals(['ABC','DEF:=GH'],        strSplitCon('ABC=DEF:=GH',[':=','='],2));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',[':=','='],3));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',[':=','='],4));
        #
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',['=',':=']));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',['=',':='],0));
        #    this.assertEquals(['ABC=DEF:=GH'],          strSplitCon('ABC=DEF:=GH',['=',':='],1));
        #    this.assertEquals(['ABC','DEF:=GH'],        strSplitCon('ABC=DEF:=GH',['=',':='],2));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',['=',':='],3));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitCon('ABC=DEF:=GH',['=',':='],4));
        #
        #    this.assertEquals(['ABC=DEF:=GH'],          strSplitCon('ABC=DEF:=GH',connull()));
        #    this.assertEquals(['ABC=DEF:=GH'],          strSplitCon('ABC=DEF:=GH',connull(),4));
        #
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitCon(':=ABC=DEF:=GH=',[':=','=']));
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitCon(':=ABC=DEF:=GH=',['=',':=']));
        #
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitCon(':=ABC:DEF:=GH:',[':=',':']));
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitCon(':=ABC:DEF:=GH:',[':',':=']));
        #}
      ENDSOURCE
      SOURCE #testStrSplitStr
        #void testStrSplitStr()
        #{
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitStr('ABC:=DEF:=GH',':='));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitStr('ABC:=DEF:=GH',':=',0));
        #    this.assertEquals(['ABC:=DEF:=GH'],         strSplitStr('ABC:=DEF:=GH',':=',1));
        #    this.assertEquals(['ABC','DEF:=GH'],        strSplitStr('ABC:=DEF:=GH',':=',2));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitStr('ABC:=DEF:=GH',':=',3));
        #    this.assertEquals(['ABC','DEF','GH'],       strSplitStr('ABC:=DEF:=GH',':=',4));
        #
        #    this.assertEquals(['ABC:=DEF:=GH'],         strSplitStr('ABC:=DEF:=GH',''));
        #    this.assertEquals(['ABC:=DEF:=GH'],         strSplitStr('ABC:=DEF:=GH','',4));
        #
        #    this.assertEquals(['','ABC','DEF','GH',''], strSplitStr(':=ABC:=DEF:=GH:=',':='));
        #
        #}
      ENDSOURCE
      SOURCE #testStrTrim
        #void testStrTrim()
        #{
        #    this.assertEquals('ABC',strTrim('ABC  '));
        #    this.assertEquals('ABC',strTrim('  ABC'));
        #    this.assertEquals('ABC',strTrim('ABC  \r\n  '));
        #    this.assertEquals('ABC',strTrim('  \r\n  ABC'));
        #    this.assertEquals('ABC',strTrim('  \r\n  ABC  \r\n  '));
        #    this.assertEquals('ABC',strTrim(@'ABC
        #    '));
        #    this.assertEquals('ABC',strTrim(@'
        #    ABC'));
        #    this.assertEquals('ABC',strTrim(@'
        #    ABC
        #    '));
        #    this.assertEquals('A',strTrim('  A  '));
        #
        #    this.assertEquals('ABC',strTrim('==ABC==','='));
        #    this.assertEquals('A',strTrim('==A==','='));
        #
        #
        #    this.assertEquals('',strTrim('  '));
        #    this.assertEquals('',strTrim('  \r\n  '));
        #    this.assertEquals('',strTrim(@'
        #    '));
        #
        #}
      ENDSOURCE
      SOURCE #main
        #static void main(Args args)
        #{
        #    SysTestRunner       runner      = new SysTestRunner(classstr(SysGlobalTest));
        #    SysTestListenerDB   listener    = new SysTestListenerDB();
        #    SysTestJobTable     sysTestJobTable;
        #
        #    runner.getResult().addListener(listener);
        #    runner.getResult().getListeners();
        #    runner.run();
        #
        #    sysTestJobTable = SysTestJobTable::find(listener.parmJobId());
        #    infolog.add( sysTestJobTable.Status == SysTestStatus::Passed ? Exception::Info : Exception::Warning,
        #                 strfmt("%3: Test complete. %1:%2", sysTestJobTable.TestJobId, sysTestJobTable.Name, sysTestJobTable.Status),
        #                 '', SysInfoAction_TableField::newBuffer(sysTestJobTable) );
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Global unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Global
    PROPERTIES
      Name                #Global
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #nz
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// если первый параметр не пустой, возвращает первый параметр. иначе возвращает второй параметр.
        #// удобно использовать вместо тренарного оператора, если нужно вернуть само значение, если оно непустое.
        #//
        #// в отличие от тренарного оператора всегда вычисляет второй параметр.
        #// Поэтому в качестве второго параметра не стоит передавать долговычисляемое выражение или выражение с побочными эффектами.
        #// Рекомендуется использовать в качестве второго параметра литералы или уже вычисленные переменные.
        #//
        #// Пример:
        #//      nz(VatValue, 20);
        #//      nz(paramName, lastUsedParamName);
        #//      nz(jour, this.parmInvoiceJour());
        #//
        #static AnyType nz(AnyType value, AnyType valueIfZero = null)
        #{
        #    if(value)
        #        return value;
        #
        #    if(prmIsDefault(valueIfZero))
        #        return nullValue(value);
        #
        #    return valueIfZero;
        #}
        #
      ENDSOURCE
      SOURCE #strAfter
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится после первого вхожения подстроки
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','DEF-') == 'GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str strAfter(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+strlen(txt), len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strAfterChar
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится после первого вхожения одного из символов characters
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'DEF-GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str strAfterChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+1, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strAfterLast
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится после последнего вхожения подстроки
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','DEF') == 'GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str strAfterLast(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+strlen(txt), len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strAfterLastChar
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится после последнего вхожения одного из символов characters
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str strAfterLastChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+1, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strBefore
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится до первого вхожения подстроки
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','DEF') == 'ABC-'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str strBefore(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strBeforeChar
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится до первого вхожения одного из символов characters
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'ABC'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str strBeforeChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strBeforeLast
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится до последнего вхожения подстроки
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','-=') == 'ABC-DEF-'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str strBeforeLast(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strBeforeLastChar
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку, которая находится до последнего вхожения одного из символов characters
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'ABC'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str strBeforeLastChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strLeft
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку заданной длины слева
        #static str strLeft(str s, int len)
        #{
        #    str ret;
        #
        #    if( len <= 0 )
        #        return '';
        #
        #    ret = substr(s, 1, len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strPadLeft
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// добавляет указанный символ слева до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #static str strPadLeft(str s, int length, char char = ' ')
        #{
        #    str ret;
        #    int l = length - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = strrep(char, l) + s;
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strPadRight
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// добавляет указанный символ справа до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #static str strPadRight(str s, int length, char char = ' ')
        #{
        #    str ret;
        #    int l = length - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = s + strrep(char, l);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strRight
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// возвращает подстроку заданной длины справа
        #static str strRight(str s, int len)
        #{
        #    str ret;
        #
        #    if( len<=0 )
        #        return '';
        #
        #    ret = substr(s, strlen(s), -len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strSplitChar
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// делит строку на подстроки, разделенные хотя бы одним символом из delimiters (по-умолчанию это пробел, табуляция и перевод строки - whitespaces)
        #// возвращает контейнер подстрок.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #// Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #//
        #// пример:
        #//      strSplitChar('ABC DEF GH')        == ['ABC','DEF','GH']
        #//      strSplitChar('ABC-DEF-GH','-=')   == ['ABC','DEF','GH']
        #//      strSplitChar('ABC-DEF-GH','-=',2) == ['ABC','DEF-GH']
        #//      strSplitChar('ABC-DEF-GH','-=',1) == ['ABC-DEF-GH']
        #//
        #static container strSplitChar(str s, str delimiters = ' \t\n', int maxSubstrings = 0)
        #{
        #    container ret;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiters == '' )
        #        return [s];
        #
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        pos = strfind(s, delimiters, posFrom, len);
        #        if( pos == 0 )
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+1;
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strSplitCon
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// делит строку на подстроки, разделенные хотя бы одной строкой из контейнера delimiterCon (по умолчанию пробел, табуляция и переводы строк - whitespaces)
        #// результат не зависит от порядка разделителей в контейнере.
        #// возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #//
        #// пример:
        #//      strSplitCon('ABC=DEF:=GH',[':=','='])   == ['ABC','DEF','GH']
        #//      strSplitCon('ABC=DEF:=GH',[':=','='],2) == ['ABC','DEF:=GH']
        #//      strSplitCon('ABC=DEF:=GH',[':=','='],1) == ['ABC=DEF:=GH']
        #//
        #static container strSplitCon(str s, container delimiterCon = [' ','\t','\n','\r\n','\n\r'], int maxSubstrings = 0)
        #{
        #    container ret;
        #    int d;
        #    str delimiter;
        #    str delimiterStr;
        #    int delimiterPos;
        #    int delimiterLen;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiterCon == connull() )
        #        return [s];
        #
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        delimiter = conpeek(delimiterCon, 1);       // проверка выше гарантирует, что хотя бы один разделитель у нас есть
        #        pos = strscan(s, delimiter, posFrom, len);  // позиция первого разделителя
        #        for(d = 2; d <= conlen(delimiterCon); d++)  // позиции разделителей после первого
        #        {
        #            delimiterStr = conpeek(delimiterCon, d);
        #            delimiterPos = strscan(s, delimiterStr, posFrom, len);
        #            if( delimiterPos == 0 )
        #                continue;
        #
        #            if( pos && pos < delimiterPos )
        #                continue;
        #
        #            if( pos == delimiterPos && strlen(delimiter) >= strlen(delimiterStr) )
        #                continue;
        #
        #            // берем разделитель с минимальной позицией
        #            // если позиция совпадает, то берем разделитель с максимальной длиной
        #            delimiter = delimiterStr;
        #            pos = delimiterPos;
        #        }
        #        if( pos == 0 )  // разделители не найдены
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+strlen(delimiter);
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strSplitStr
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// делит строку на подстроки, разделенные строкой delimiterStr
        #// возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #//
        #// пример:
        #//      strSplitCon('ABC:=DEF:=GH',':=')   == ['ABC','DEF','GH']
        #//      strSplitCon('ABC:=DEF:=GH',':=',2) == ['ABC','DEF:=GH']
        #//      strSplitCon('ABC:=DEF:=GH',':=',1) == ['ABC:=DEF:=GH']
        #//
        #static container strSplitStr(str s, str delimiterStr, int maxSubstrings = 0)
        #{
        #    container ret;
        #    int delimiterLen;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiterStr == '' )
        #        return [s];
        #
        #    delimiterLen = strlen(delimiterStr);
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        pos = strscan(s, delimiterStr, posFrom, len);
        #        if( pos == 0 )
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+delimiterLen;
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strTrim
        #//
        #// https://github.com/mazzy-ax/SysGlobal
        #//
        #// убирает указанные символы в начале и в конце строки
        #// по умолчанию, убирает пробелы, табуляцию и переводы строк
        #static str strTrim(str s, str ws = ' \t\r\n')
        #{
        #    str ret;
        #    int len = strlen(s);
        #    int fromPos = strnfind(s, ws, 1, len);
        #    int toPos = strnfind(s, ws, len, -len);
        #
        #    if( fromPos && fromPos <= toPos )
        #    {
        #        ret = substr(s, fromPos, toPos - fromPos + 1);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : SysGlobal unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysGlobal
   SHARED
  PROPERTIES
    Name                #SysGlobal
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50253
      NODETYPE 329
      NAME #SysGlobalTest
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 61446
      NODETYPE 329
      NAME #Global
    ENDNODE
  ENDPROJECT
  

***Element: END
