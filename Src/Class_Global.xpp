
    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // если первый параметр не пустой, возвращает первый параметр. иначе возвращает второй параметр.
    // удобно использовать вместо тренарного оператора, если нужно вернуть само значение, если оно непустое.
    //
    // в отличие от тренарного оператора всегда вычисляет второй параметр.
    // Поэтому в качестве второго параметра не стоит передавать долговычисляемое выражение или выражение с побочными эффектами.
    // Рекомендуется использовать в качестве второго параметра литералы или уже вычисленные переменные.
    //
    // Пример:
    //      nz(VatValue, 20);
    //      nz(paramName, lastUsedParamName);
    //      nz(jour, this.parmInvoiceJour());
    //
    static AnyType nz(AnyType value, AnyType valueIfZero = null)
    {
        if(value)
            return value;

        if(prmIsDefault(valueIfZero))
            return nullValue(value);

        return valueIfZero;
    }


    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится после первого вхожения подстроки
    // возвращает исходную строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-GH','DEF-') == 'GH'
    //      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
    //
    static str strAfter(str s, str txt)
    {
        int len = strlen(s);
        int pos = strscan(s, txt, 1, len);
        str ret = s;

        if(pos)
            ret = substr(s, pos+strlen(txt), len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится после первого вхожения одного из символов characters
    // возвращает исходную строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-GH','-=') == 'DEF-GH'
    //      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
    //
    static str strAfterChar(str s, str characters)
    {
        int len = strlen(s);
        int pos = strfind(s, characters, 1, len);
        str ret = s;

        if(pos)
            ret = substr(s, pos+1, len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится после последнего вхожения подстроки
    // возвращает исходную строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-DEFGH','DEF') == 'GH'
    //      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
    //
    static str strAfterLast(str s, str txt)
    {
        int len = strlen(s);
        int pos = strscan(s, txt, len, -len);
        str ret = s;

        if(pos)
            ret = substr(s, pos+strlen(txt), len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится после последнего вхожения одного из символов characters
    // возвращает исходную строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-GH','-=') == 'GH'
    //      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
    //
    static str strAfterLastChar(str s, str characters)
    {
        int len = strlen(s);
        int pos = strfind(s, characters, len, -len);
        str ret = s;

        if(pos)
            ret = substr(s, pos+1, len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится до первого вхожения подстроки
    // возвращает пустую строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-DEFGH','DEF') == 'ABC-'
    //      strBefore('ABC-DEF-GH',',')  == ''
    //
    static str strBefore(str s, str txt)
    {
        int len = strlen(s);
        int pos = strscan(s, txt, 1, len);
        str ret = s;

        if(pos)
            ret = strLeft(s, pos-1);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится до первого вхожения одного из символов characters
    // возвращает пустую строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-GH','-=') == 'ABC'
    //      strBefore('ABC-DEF-GH',',')  == ''
    //
    static str strBeforeChar(str s, str characters)
    {
        int len = strlen(s);
        int pos = strfind(s, characters, 1, len);
        str ret = s;

        if(pos)
            ret = strLeft(s, pos-1);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится до последнего вхожения подстроки
    // возвращает пустую строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-DEFGH','-=') == 'ABC-DEF-'
    //      strBefore('ABC-DEF-GH',',')  == ''
    //
    static str strBeforeLast(str s, str txt)
    {
        int len = strlen(s);
        int pos = strscan(s, txt, len, -len);
        str ret = s;

        if(pos)
            ret = strLeft(s, pos-1);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку, которая находится до последнего вхожения одного из символов characters
    // возвращает пустую строку, если ни одного вхождения не найдено
    //
    // пример:
    //      strBefore('ABC-DEF-GH','-=') == 'ABC'
    //      strBefore('ABC-DEF-GH',',')  == ''
    //
    static str strBeforeLastChar(str s, str characters)
    {
        int len = strlen(s);
        int pos = strfind(s, characters, len, -len);
        str ret = s;

        if(pos)
            ret = strLeft(s, pos-1);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку заданной длины слева
    static str strLeft(str s, int len)
    {
        str ret;

        if( len <= 0 )
            return '';

        ret = substr(s, 1, len);
        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // добавляет указанный символ слева до нужной длины
    // если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
    static str strPadLeft(str s, int length, char char = ' ')
    {
        str ret;
        int l = length - strlen(s);

        if(l<=0)
            return s;

        ret = strrep(char, l) + s;
        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // добавляет указанный символ справа до нужной длины
    // если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
    static str strPadRight(str s, int length, char char = ' ')
    {
        str ret;
        int l = length - strlen(s);

        if(l<=0)
            return s;

        ret = s + strrep(char, l);
        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // возвращает подстроку заданной длины справа
    static str strRight(str s, int len)
    {
        str ret;

        if( len<=0 )
            return '';

        ret = substr(s, strlen(s), -len);
        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // делит строку на подстроки, разделенные хотя бы одним символом из delimiters (по-умолчанию это пробел, табуляция и перевод строки - whitespaces)
    // возвращает контейнер подстрок.
    // возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
    // Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
    //
    // пример:
    //      strSplitChar('ABC DEF GH')        == ['ABC','DEF','GH']
    //      strSplitChar('ABC-DEF-GH','-=')   == ['ABC','DEF','GH']
    //      strSplitChar('ABC-DEF-GH','-=',2) == ['ABC','DEF-GH']
    //      strSplitChar('ABC-DEF-GH','-=',1) == ['ABC-DEF-GH']
    //
    static container strSplitChar(str s, str delimiters = ' \t\n', int maxSubstrings = 0)
    {
        container ret;
        int len;
        int posFrom = 1;
        int pos;

        if( delimiters == '' )
            return [s];

        len = strlen(s);
        do
        {
            maxSubstrings--;
            if( maxSubstrings == 0 )
                break;

            pos = strfind(s, delimiters, posFrom, len);
            if( pos == 0 )
                break;

            ret += substr(s, posFrom, pos-posFrom);
            posFrom = pos+1;
        }
        while( maxSubstrings );

        ret += substr(s, posFrom, len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // делит строку на подстроки, разделенные хотя бы одной строкой из контейнера delimiterCon (по умолчанию пробел, табуляция и переводы строк - whitespaces)
    // результат не зависит от порядка разделителей в контейнере.
    // возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
    // возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
    //
    // пример:
    //      strSplitCon('ABC=DEF:=GH',[':=','='])   == ['ABC','DEF','GH']
    //      strSplitCon('ABC=DEF:=GH',[':=','='],2) == ['ABC','DEF:=GH']
    //      strSplitCon('ABC=DEF:=GH',[':=','='],1) == ['ABC=DEF:=GH']
    //
    static container strSplitCon(str s, container delimiterCon = [' ','\t','\n','\r\n','\n\r'], int maxSubstrings = 0)
    {
        container ret;
        int d;
        str delimiter;
        str delimiterStr;
        int delimiterPos;
        int delimiterLen;
        int len;
        int posFrom = 1;
        int pos;

        if( delimiterCon == connull() )
            return [s];

        len = strlen(s);
        do
        {
            maxSubstrings--;
            if( maxSubstrings == 0 )
                break;

            delimiter = conpeek(delimiterCon, 1);       // проверка выше гарантирует, что хотя бы один разделитель у нас есть
            pos = strscan(s, delimiter, posFrom, len);  // позиция первого разделителя
            for(d = 2; d <= conlen(delimiterCon); d++)  // позиции разделителей после первого
            {
                delimiterStr = conpeek(delimiterCon, d);
                delimiterPos = strscan(s, delimiterStr, posFrom, len);
                if( delimiterPos == 0 )
                    continue;

                if( pos && pos < delimiterPos )
                    continue;

                if( pos == delimiterPos && strlen(delimiter) >= strlen(delimiterStr) )
                    continue;

                // берем разделитель с минимальной позицией
                // если позиция совпадает, то берем разделитель с максимальной длиной
                delimiter = delimiterStr;
                pos = delimiterPos;
            }
            if( pos == 0 )  // разделители не найдены
                break;

            ret += substr(s, posFrom, pos-posFrom);
            posFrom = pos+strlen(delimiter);
        }
        while( maxSubstrings );

        ret += substr(s, posFrom, len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // делит строку на подстроки, разделенные строкой delimiterStr
    // возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
    // возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
    //
    // пример:
    //      strSplitCon('ABC:=DEF:=GH',':=')   == ['ABC','DEF','GH']
    //      strSplitCon('ABC:=DEF:=GH',':=',2) == ['ABC','DEF:=GH']
    //      strSplitCon('ABC:=DEF:=GH',':=',1) == ['ABC:=DEF:=GH']
    //
    static container strSplitStr(str s, str delimiterStr, int maxSubstrings = 0)
    {
        container ret;
        int delimiterLen;
        int len;
        int posFrom = 1;
        int pos;

        if( delimiterStr == '' )
            return [s];

        delimiterLen = strlen(delimiterStr);
        len = strlen(s);
        do
        {
            maxSubstrings--;
            if( maxSubstrings == 0 )
                break;

            pos = strscan(s, delimiterStr, posFrom, len);
            if( pos == 0 )
                break;

            ret += substr(s, posFrom, pos-posFrom);
            posFrom = pos+delimiterLen;
        }
        while( maxSubstrings );

        ret += substr(s, posFrom, len);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysGlobal
    //
    // убирает указанные символы в начале и в конце строки
    // по умолчанию, убирает пробелы, табуляцию и переводы строк
    static str strTrim(str s, str ws = ' \t\r\n')
    {
        str ret;
        int len = strlen(s);
        int fromPos = strnfind(s, ws, 1, len);
        int toPos = strnfind(s, ws, len, -len);

        if( fromPos && fromPos <= toPos )
        {
            ret = substr(s, fromPos, toPos - fromPos + 1);
        }

        return ret;
    }
